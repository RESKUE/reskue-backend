openapi: 3.0.0
info:
  title: "RESKUE API"
  description: "API for the RESKUE project"
  version: '1.0'
paths:
  /api/culturalAsset:
    get:
      tags:
        - cultural asset
      parameters:
        - in: query
          name: filter
          schema:
            type: string
          description: filter response attributes
        - in: query
          name: sort
          schema:
            type: string
          description: sort response by attributes
        - in: query
          name: page
          schema:
            type: integer
          description: page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: page size for pagination
      responses:
        '200':
          description: all cultural assets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CulturalAssetEntity'
    post:
      tags:
        - cultural asset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CulturalAssetEntity'
      responses:
        '200':
          description: creates a cultural asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CulturalAssetEntity'
  /api/culturalAsset/{id}:
    get:
      tags:
        - cultural asset
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: find a cultural asset by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CulturalAssetEntity'
    put:
      tags:
        - cultural asset
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CulturalAssetEntity'
      responses:
        '200':
          description: updates a cultural asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CulturalAssetEntity'
    delete:
      tags:
        - cultural asset
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: deletes a cultural asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CulturalAssetEntity'
  /api/culturalAsset/{id}/tasks:
    get:
      tags:
          - cultural asset
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: all tasks of a cultural asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskEntity'
  /api/culturalAsset/{id}/comments:
    get:
      tags:
          - cultural asset
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: all comments of a cultural asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntity'
  /api/culturalAsset/{id}/addTag/{tag}:
    put:
      tags:
        - cultural asset
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
      responses:
        '200':
          description: add a tag to a cultural asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CulturalAssetEntity'
  /api/culturalAsset/{id}/removeTag/{tag}:
    put:
      tags:
        - cultural asset
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
      responses:
        '200':
          description: removes a tag from a cultural asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CulturalAssetEntity'
  /api/culturalAsset/{id}/addChild/{culturalAssetId}:
    put:
      tags:
        - cultural asset
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: culturalAssetId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: adds a child to a cultural asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CulturalAssetEntity'
  /api/culturalAsset/{id}/removeChild/{culturalAssetId}:
    put:
      tags:
        - cultural asset
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: culturalAssetId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: removes a child from a cultural asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CulturalAssetEntity'
  /api/culturalAsset/{id}/setParent/{culturalAssetId}:
    put:
      tags:
        - cultural asset
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: culturalAssetId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: sets the parent of a cultural asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CulturalAssetEntity'
  /api/culturalAsset/{id}/removeParent:
    put:
      tags:
        - cultural asset
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: removes the parent from a cultural asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CulturalAssetEntity'
  /api/task:
    get:
      tags:
        - task
      parameters:
        - in: query
          name: filter
          schema:
            type: string
          description: filter response attributes
        - in: query
          name: sort
          schema:
            type: string
          description: sort response by attributes
        - in: query
          name: page
          schema:
            type: integer
          description: page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: page size for pagination
      responses:
        '200':
          description: all tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskEntity'
    post:
      tags:
        - task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskEntity'
      responses:
        '200':
          description: creates a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskEntity'
  /api/task/{id}:
    get:
      tags:
        - task
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: find a task by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskEntity'
    put:
      tags:
        - task
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskEntity'
      responses:
        '200':
          description: updates a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskEntity'
    delete:
      tags:
        - task
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: deletes a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskEntity'
  /api/task/{id}/subtasks:
    get:
      tags:
          - task
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: all subtasks of a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubtaskEntity'
  /api/task/{id}/helpers:
    get:
      tags:
          - task
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: all helpers of a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
  /api/task/{id}/comments:
    get:
      tags:
          - task
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: all comments of a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntity'
  /api/task/{id}/changeState/{state}:
    put:
      tags:
        - task
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: state
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: changes the state of a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskEntity'
  /api/task/{id}/addTag/{tag}:
    put:
      tags:
        - task
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
      responses:
        '200':
          description: add a tag to a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskEntity'
  /api/task/{id}/removeTag/{tag}:
    put:
      tags:
        - task
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
      responses:
        '200':
          description: removes a tag from a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskEntity'
  /api/task/{id}/assignHelper/{userId}:
    put:
      tags:
        - task
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: assign a helper to a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskEntity'
  /api/task/{id}/removeHelper/{userId}:
    put:
      tags:
        - task
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: removes a helper from a task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskEntity'
  /api/subtask:
    get:
      tags:
        - subtask
      parameters:
        - in: query
          name: filter
          schema:
            type: string
          description: filter response attributes
        - in: query
          name: sort
          schema:
            type: string
          description: sort response by attributes
        - in: query
          name: page
          schema:
            type: integer
          description: page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: page size for pagination
      responses:
        '200':
          description: all subtasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubtaskEntity'
    post:
      tags:
        - subtask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubtaskEntity'
      responses:
        '200':
          description: creates a subtask
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubtaskEntity'
  /api/subtask/{id}:
    get:
      tags:
        - subtask
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: find a subtask by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubtaskEntity'
    put:
      tags:
        - subtask
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubtaskEntity'
      responses:
        '200':
          description: updates a subtask
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubtaskEntity'
    delete:
      tags:
        - subtask
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: deletes a subtask
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubtaskEntity'
  /api/subtask/{id}/changeState/{state}:
    put:
      tags:
        - subtask
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: state
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: changes the state of a subtask
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubtaskEntity'
  /api/comment:
    get:
      tags:
        - comment
      parameters:
        - in: query
          name: filter
          schema:
            type: string
          description: filter response attributes
        - in: query
          name: sort
          schema:
            type: string
          description: sort response by attributes
        - in: query
          name: page
          schema:
            type: integer
          description: page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: page size for pagination
      responses:
        '200':
          description: all comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntity'
    post:
      tags:
        - comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentEntity'
      responses:
        '200':
          description: creates a comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntity'
  /api/comment/{id}:
    get:
      tags:
        - comment
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: find a comment by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntity'
    put:
      tags:
        - comment
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentEntity'
      responses:
        '200':
          description: updates a comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntity'
    delete:
      tags:
        - comment
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: deletes a comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntity'
  /api/user:
    get:
      tags:
        - user
      parameters:
        - in: query
          name: filter
          schema:
            type: string
          description: filter response attributes
        - in: query
          name: sort
          schema:
            type: string
          description: sort response by attributes
        - in: query
          name: page
          schema:
            type: integer
          description: page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: page size for pagination
      responses:
        '200':
          description: all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
    post:
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEntity'
      responses:
        '200':
          description: creates a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
  /api/user/{id}:
    get:
      tags:
        - user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: find a user by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
    put:
      tags:
        - user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEntity'
      responses:
        '200':
          description: updates a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
    delete:
      tags:
        - user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: deletes a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
  /api/userGroup:
    get:
      tags:
        - user group
      parameters:
        - in: query
          name: filter
          schema:
            type: string
          description: filter response attributes
        - in: query
          name: sort
          schema:
            type: string
          description: sort response by attributes
        - in: query
          name: page
          schema:
            type: integer
          description: page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: page size for pagination
      responses:
        '200':
          description: all user groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupEntity'
    post:
      tags:
        - user group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupEntity'
      responses:
        '200':
          description: creates a user group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupEntity'
  /api/userGroup/{id}:
    get:
      tags:
        - user group
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: find a user group by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupEntity'
    put:
      tags:
        - user group
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupEntity'
      responses:
        '200':
          description: updates a user group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupEntity'
    delete:
      tags:
        - user group
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: deletes a user group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupEntity'
  /api/userGroup/{id}/users:
    get:
      tags:
          - user group
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: all users of a user group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
  /api/userGroup/{id}/addUser/{userId}:
    put:
      tags:
        - user group
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: add a user to a user group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupEntity'
  /api/userGroup/{id}/removeUser/{userId}:
    put:
      tags:
        - user group
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: remove a user from a user group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupEntity'
  /api/event:
    get:
      tags:
          - event
      parameters:
        - in: query
          name: filter
          schema:
            type: string
          description: filter response attributes
        - in: query
          name: sort
          schema:
            type: string
          description: sort response by attributes
        - in: query
          name: page
          schema:
            type: integer
          description: page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: page size for pagination
      responses:
        '200':
          description: all events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventEntity'
  /api/event/{id}:
    get:
      tags:
        - event
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: find an event by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventEntity'
    delete:
      tags:
        - event
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: deletes an event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventEntity'
  /api/event/sendEvent:
    post:
      tags:
        - event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventEntity'
      responses:
        '200':
          description: send an event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventEntity'
  /api/notification:
    get:
      tags:
          - notification
      parameters:
        - in: query
          name: filter
          schema:
            type: string
          description: filter response attributes
        - in: query
          name: sort
          schema:
            type: string
          description: sort response by attributes
        - in: query
          name: page
          schema:
            type: integer
          description: page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: page size for pagination
      responses:
        '200':
          description: all notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEntity'
  /api/notification/{id}:
    get:
      tags:
        - notification
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: find a notification by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEntity'
    delete:
      tags:
        - notification
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: deletes a notification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEntity'
  /api/notification/sendNotification:
    post:
      tags:
        - notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEntity'
      responses:
        '200':
          description: send a notification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEntity'
  /api/notification/userNotifications/{userId}:
    get:
      tags:
        - notification
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: get all notifications of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEntity'
  /api/media/:
    post:
      tags:
        - media
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
      responses:
        '200':
          description: upload a media file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaEntity'
  /api/media/{id}:
    get:
      tags:
        - media
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: download a media file
          content:
            application/octet-stream:
              schema:
                type: object
components:
  schemas:
    BaseEntity:
      type: object
      properties:
        id:
          type: integer
    ReskueEntity:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            name:
              type: string
            description:
              type: string
            tags: 
              type: array
              items:
                type: string
            comments:
              type: array
              items:
                type: object
                description: CommentEntity
            media:
              type: array
              items:
                type: object
                description: MediaEntity
    CulturalAssetEntity:
      allOf:
        - $ref: '#/components/schemas/ReskueEntity'
        - type: object
          properties:
            label:
              type: string
            longitude:
              type: object
              description: double
            latitude:
              type: object
              description: double
            level:
              type: integer
            parent:
              type: object
              description: CulturalAssetEntity
            children:
              type: array
              items:
                type: object
                description: CulturalAssetEntity
            tasks:
              type: array
              items:
                type: object
                description: TaskEntity
    TaskEntity:
      allOf:
        - $ref: '#/components/schemas/ReskueEntity'
        - type: object
          properties:
            state:
              type: integer
            numOfHelpersRecommended:
              type: integer
            subtasks:
              type: array
              items:
                type: object
                description: SubtaskEntity
            helper:
              type: array
              items:
                type: object
                description: UserEntity
            contact:
              type: object
              description: UserEntity
    SubtaskEntity:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            state:
              type: integer
            text:
              type: string
            isRequired:
              type: boolean
            task:
              type: object
              description: TaskEntity
    CommentEntity:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            entity:
              type: object
              description: ReskueEntity
            text:
              type: string
            media:
              type: array
              items:
                type: object
                description: MediaEntity
            author:
              type: object
              description: UserEntity
            createdAt:
              type: string
            updatedAt:
              type: string
    UserEntity:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            name:
              type: string
            commentAuthor:
              type: array
              items:
                type: object
                description: CommentEntity
            taskHelper:
              type: array
              items:
                type: object
                description: TaskEntity
            taskContact:
              type: array
              items:
                type: object
                description: TaskEntity
            userGroups:
              type: array
              items:
                type: object
                description: UserGroupEntity
    UserGroupEntity:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            name:
              type: string
            users:
              type: array
              items:
                type: object
                description: UserEntity
    EventEntity:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            message:
              type: string
            type:
              type: integer
            sender:
              type: string
            sendAt:
              type: string
            entityId:
              type: integer
            entity:
              type: object
              description: ReskueEntity
    NotificationEntity:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            title:
              type: string
            message:
              type: string
            type:
              type: integer
            sender:
              type: string
            receivers:
              type: array
              items:
                type: string
            sendAt:
              type: string
            entityId:
              type: integer
            entity:
              type: object
              description: ReskueEntity
    MediaEntity:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
tags:
  - name: cultural asset
  - name: task
  - name: subtask
  - name: comment
  - name: user
  - name: user group
  - name: event
  - name: notification
  - name: media